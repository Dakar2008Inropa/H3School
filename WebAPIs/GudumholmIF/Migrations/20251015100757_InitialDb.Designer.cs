// <auto-generated />
using System;
using GudumholmIF.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GudumholmIF.Migrations
{
    [DbContext(typeof(ClubContext))]
    [Migration("20251015100757_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GudumholmIF.Models.Application.BoardRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("From")
                        .HasColumnType("date");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("To")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.HasIndex("PersonId", "To")
                        .IsUnique()
                        .HasFilter("[To] IS NULL");

                    b.ToTable("BoardRoles");
                });

            modelBuilder.Entity("GudumholmIF.Models.Application.Household", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("HouseHolds");
                });

            modelBuilder.Entity("GudumholmIF.Models.Application.MembershipState", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ActiveSince")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("PassiveSince")
                        .HasColumnType("date");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.ToTable("MembershipStates", t =>
                        {
                            t.HasCheckConstraint("CK_MembershipState_Dates", "(State = 1 AND ActiveSince IS NOT NULL AND PassiveSince IS NULL)\r\n                      OR (State = 2 AND PassiveSince IS NOT NULL AND ActiveSince IS NULL)");
                        });
                });

            modelBuilder.Entity("GudumholmIF.Models.Application.ParentRole", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("ActiveChildrenCount")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.ToTable("ParentRoles");
                });

            modelBuilder.Entity("GudumholmIF.Models.Application.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CPR")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HouseholdId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CPR")
                        .IsUnique();

                    b.HasIndex("HouseholdId");

                    b.ToTable("Persons", t =>
                        {
                            t.HasCheckConstraint("CK_Person_CPR_Format", "CPR LIKE '[0-9][0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]'");
                        });
                });

            modelBuilder.Entity("GudumholmIF.Models.Application.PersonSport", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Joined")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("Left")
                        .HasColumnType("date");

                    b.HasKey("PersonId", "SportId", "Joined");

                    b.HasIndex("SportId");

                    b.ToTable("PersonSports");
                });

            modelBuilder.Entity("GudumholmIF.Models.Application.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AnnualFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("GudumholmIF.Models.Application.SportFeeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AnnualFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateOnly>("EffectiveFrom")
                        .HasColumnType("date");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SportId", "EffectiveFrom")
                        .IsUnique();

                    b.ToTable("SportFeeHistories");
                });

            modelBuilder.Entity("GudumholmIF.Models.Application.BoardRole", b =>
                {
                    b.HasOne("GudumholmIF.Models.Application.Person", "Person")
                        .WithMany("BoardRoles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GudumholmIF.Models.Application.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("GudumholmIF.Models.Application.MembershipState", b =>
                {
                    b.HasOne("GudumholmIF.Models.Application.Person", "Person")
                        .WithOne("State")
                        .HasForeignKey("GudumholmIF.Models.Application.MembershipState", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GudumholmIF.Models.Application.ParentRole", b =>
                {
                    b.HasOne("GudumholmIF.Models.Application.Person", "Person")
                        .WithOne("ParentRole")
                        .HasForeignKey("GudumholmIF.Models.Application.ParentRole", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GudumholmIF.Models.Application.Person", b =>
                {
                    b.HasOne("GudumholmIF.Models.Application.Household", "HouseHold")
                        .WithMany("Members")
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HouseHold");
                });

            modelBuilder.Entity("GudumholmIF.Models.Application.PersonSport", b =>
                {
                    b.HasOne("GudumholmIF.Models.Application.Person", "Person")
                        .WithMany("Sports")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GudumholmIF.Models.Application.Sport", "Sport")
                        .WithMany("Members")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("GudumholmIF.Models.Application.SportFeeHistory", b =>
                {
                    b.HasOne("GudumholmIF.Models.Application.Sport", "Sport")
                        .WithMany("FeeHistory")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("GudumholmIF.Models.Application.Household", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("GudumholmIF.Models.Application.Person", b =>
                {
                    b.Navigation("BoardRoles");

                    b.Navigation("ParentRole");

                    b.Navigation("Sports");

                    b.Navigation("State");
                });

            modelBuilder.Entity("GudumholmIF.Models.Application.Sport", b =>
                {
                    b.Navigation("FeeHistory");

                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
